// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ORDERBOOK_MD_H_
#define FLATBUFFERS_GENERATED_ORDERBOOK_MD_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace md {

struct FBBookDeltaEvent;
struct FBBookDeltaEventBuilder;

struct OrderMsgOrder;
struct OrderMsgOrderBuilder;

struct OrderMsgLevel;
struct OrderMsgLevelBuilder;

struct DeltaBatch;
struct DeltaBatchBuilder;

struct OrderBookSnapshot;
struct OrderBookSnapshotBuilder;

struct Envelope;
struct EnvelopeBuilder;

enum Kind : int8_t {
  Kind_Add = 0,
  Kind_Modify = 1,
  Kind_Remove = 2,
  Kind_Trade = 3,
  Kind_MIN = Kind_Add,
  Kind_MAX = Kind_Trade
};

inline const Kind (&EnumValuesKind())[4] {
  static const Kind values[] = {
    Kind_Add,
    Kind_Modify,
    Kind_Remove,
    Kind_Trade
  };
  return values;
}

inline const char * const *EnumNamesKind() {
  static const char * const names[5] = {
    "Add",
    "Modify",
    "Remove",
    "Trade",
    nullptr
  };
  return names;
}

inline const char *EnumNameKind(Kind e) {
  if (::flatbuffers::IsOutRange(e, Kind_Add, Kind_Trade)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesKind()[index];
}

enum Side : int8_t {
  Side_Buy = 0,
  Side_Sell = 1,
  Side_MIN = Side_Buy,
  Side_MAX = Side_Sell
};

inline const Side (&EnumValuesSide())[2] {
  static const Side values[] = {
    Side_Buy,
    Side_Sell
  };
  return values;
}

inline const char * const *EnumNamesSide() {
  static const char * const names[3] = {
    "Buy",
    "Sell",
    nullptr
  };
  return names;
}

inline const char *EnumNameSide(Side e) {
  if (::flatbuffers::IsOutRange(e, Side_Buy, Side_Sell)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSide()[index];
}

enum BookMsg : uint8_t {
  BookMsg_NONE = 0,
  BookMsg_DeltaBatch = 1,
  BookMsg_OrderBookSnapshot = 2,
  BookMsg_MIN = BookMsg_NONE,
  BookMsg_MAX = BookMsg_OrderBookSnapshot
};

inline const BookMsg (&EnumValuesBookMsg())[3] {
  static const BookMsg values[] = {
    BookMsg_NONE,
    BookMsg_DeltaBatch,
    BookMsg_OrderBookSnapshot
  };
  return values;
}

inline const char * const *EnumNamesBookMsg() {
  static const char * const names[4] = {
    "NONE",
    "DeltaBatch",
    "OrderBookSnapshot",
    nullptr
  };
  return names;
}

inline const char *EnumNameBookMsg(BookMsg e) {
  if (::flatbuffers::IsOutRange(e, BookMsg_NONE, BookMsg_OrderBookSnapshot)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBookMsg()[index];
}

template<typename T> struct BookMsgTraits {
  static const BookMsg enum_value = BookMsg_NONE;
};

template<> struct BookMsgTraits<md::DeltaBatch> {
  static const BookMsg enum_value = BookMsg_DeltaBatch;
};

template<> struct BookMsgTraits<md::OrderBookSnapshot> {
  static const BookMsg enum_value = BookMsg_OrderBookSnapshot;
};

bool VerifyBookMsg(::flatbuffers::Verifier &verifier, const void *obj, BookMsg type);
bool VerifyBookMsgVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct FBBookDeltaEvent FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FBBookDeltaEventBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KIND = 4,
    VT_ORDER_ID = 6,
    VT_PRICE = 8,
    VT_QTY = 10,
    VT_SIDE = 12,
    VT_SEQ = 14
  };
  md::Kind kind() const {
    return static_cast<md::Kind>(GetField<int8_t>(VT_KIND, 0));
  }
  uint64_t order_id() const {
    return GetField<uint64_t>(VT_ORDER_ID, 0);
  }
  uint64_t price() const {
    return GetField<uint64_t>(VT_PRICE, 0);
  }
  uint32_t qty() const {
    return GetField<uint32_t>(VT_QTY, 0);
  }
  md::Side side() const {
    return static_cast<md::Side>(GetField<int8_t>(VT_SIDE, 0));
  }
  uint64_t seq() const {
    return GetField<uint64_t>(VT_SEQ, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_KIND, 1) &&
           VerifyField<uint64_t>(verifier, VT_ORDER_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_PRICE, 8) &&
           VerifyField<uint32_t>(verifier, VT_QTY, 4) &&
           VerifyField<int8_t>(verifier, VT_SIDE, 1) &&
           VerifyField<uint64_t>(verifier, VT_SEQ, 8) &&
           verifier.EndTable();
  }
};

struct FBBookDeltaEventBuilder {
  typedef FBBookDeltaEvent Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_kind(md::Kind kind) {
    fbb_.AddElement<int8_t>(FBBookDeltaEvent::VT_KIND, static_cast<int8_t>(kind), 0);
  }
  void add_order_id(uint64_t order_id) {
    fbb_.AddElement<uint64_t>(FBBookDeltaEvent::VT_ORDER_ID, order_id, 0);
  }
  void add_price(uint64_t price) {
    fbb_.AddElement<uint64_t>(FBBookDeltaEvent::VT_PRICE, price, 0);
  }
  void add_qty(uint32_t qty) {
    fbb_.AddElement<uint32_t>(FBBookDeltaEvent::VT_QTY, qty, 0);
  }
  void add_side(md::Side side) {
    fbb_.AddElement<int8_t>(FBBookDeltaEvent::VT_SIDE, static_cast<int8_t>(side), 0);
  }
  void add_seq(uint64_t seq) {
    fbb_.AddElement<uint64_t>(FBBookDeltaEvent::VT_SEQ, seq, 0);
  }
  explicit FBBookDeltaEventBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FBBookDeltaEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FBBookDeltaEvent>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FBBookDeltaEvent> CreateFBBookDeltaEvent(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    md::Kind kind = md::Kind_Add,
    uint64_t order_id = 0,
    uint64_t price = 0,
    uint32_t qty = 0,
    md::Side side = md::Side_Buy,
    uint64_t seq = 0) {
  FBBookDeltaEventBuilder builder_(_fbb);
  builder_.add_seq(seq);
  builder_.add_price(price);
  builder_.add_order_id(order_id);
  builder_.add_qty(qty);
  builder_.add_side(side);
  builder_.add_kind(kind);
  return builder_.Finish();
}

struct OrderMsgOrder FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OrderMsgOrderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_QTY = 6,
    VT_SIDE = 8
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  uint32_t qty() const {
    return GetField<uint32_t>(VT_QTY, 0);
  }
  md::Side side() const {
    return static_cast<md::Side>(GetField<int8_t>(VT_SIDE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<uint32_t>(verifier, VT_QTY, 4) &&
           VerifyField<int8_t>(verifier, VT_SIDE, 1) &&
           verifier.EndTable();
  }
};

struct OrderMsgOrderBuilder {
  typedef OrderMsgOrder Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(OrderMsgOrder::VT_ID, id, 0);
  }
  void add_qty(uint32_t qty) {
    fbb_.AddElement<uint32_t>(OrderMsgOrder::VT_QTY, qty, 0);
  }
  void add_side(md::Side side) {
    fbb_.AddElement<int8_t>(OrderMsgOrder::VT_SIDE, static_cast<int8_t>(side), 0);
  }
  explicit OrderMsgOrderBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OrderMsgOrder> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OrderMsgOrder>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OrderMsgOrder> CreateOrderMsgOrder(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    uint32_t qty = 0,
    md::Side side = md::Side_Buy) {
  OrderMsgOrderBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_qty(qty);
  builder_.add_side(side);
  return builder_.Finish();
}

struct OrderMsgLevel FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OrderMsgLevelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRICE = 4,
    VT_ORDERS = 6
  };
  uint64_t price() const {
    return GetField<uint64_t>(VT_PRICE, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<md::OrderMsgOrder>> *orders() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<md::OrderMsgOrder>> *>(VT_ORDERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PRICE, 8) &&
           VerifyOffset(verifier, VT_ORDERS) &&
           verifier.VerifyVector(orders()) &&
           verifier.VerifyVectorOfTables(orders()) &&
           verifier.EndTable();
  }
};

struct OrderMsgLevelBuilder {
  typedef OrderMsgLevel Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_price(uint64_t price) {
    fbb_.AddElement<uint64_t>(OrderMsgLevel::VT_PRICE, price, 0);
  }
  void add_orders(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<md::OrderMsgOrder>>> orders) {
    fbb_.AddOffset(OrderMsgLevel::VT_ORDERS, orders);
  }
  explicit OrderMsgLevelBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OrderMsgLevel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OrderMsgLevel>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OrderMsgLevel> CreateOrderMsgLevel(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t price = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<md::OrderMsgOrder>>> orders = 0) {
  OrderMsgLevelBuilder builder_(_fbb);
  builder_.add_price(price);
  builder_.add_orders(orders);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OrderMsgLevel> CreateOrderMsgLevelDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t price = 0,
    const std::vector<::flatbuffers::Offset<md::OrderMsgOrder>> *orders = nullptr) {
  auto orders__ = orders ? _fbb.CreateVector<::flatbuffers::Offset<md::OrderMsgOrder>>(*orders) : 0;
  return md::CreateOrderMsgLevel(
      _fbb,
      price,
      orders__);
}

struct DeltaBatch FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DeltaBatchBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SYMBOL = 4,
    VT_SEQ_START = 6,
    VT_SEQ_END = 8,
    VT_EVENTS = 10
  };
  const ::flatbuffers::String *symbol() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYMBOL);
  }
  uint64_t seq_start() const {
    return GetField<uint64_t>(VT_SEQ_START, 0);
  }
  uint64_t seq_end() const {
    return GetField<uint64_t>(VT_SEQ_END, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<md::FBBookDeltaEvent>> *events() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<md::FBBookDeltaEvent>> *>(VT_EVENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SYMBOL) &&
           verifier.VerifyString(symbol()) &&
           VerifyField<uint64_t>(verifier, VT_SEQ_START, 8) &&
           VerifyField<uint64_t>(verifier, VT_SEQ_END, 8) &&
           VerifyOffset(verifier, VT_EVENTS) &&
           verifier.VerifyVector(events()) &&
           verifier.VerifyVectorOfTables(events()) &&
           verifier.EndTable();
  }
};

struct DeltaBatchBuilder {
  typedef DeltaBatch Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_symbol(::flatbuffers::Offset<::flatbuffers::String> symbol) {
    fbb_.AddOffset(DeltaBatch::VT_SYMBOL, symbol);
  }
  void add_seq_start(uint64_t seq_start) {
    fbb_.AddElement<uint64_t>(DeltaBatch::VT_SEQ_START, seq_start, 0);
  }
  void add_seq_end(uint64_t seq_end) {
    fbb_.AddElement<uint64_t>(DeltaBatch::VT_SEQ_END, seq_end, 0);
  }
  void add_events(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<md::FBBookDeltaEvent>>> events) {
    fbb_.AddOffset(DeltaBatch::VT_EVENTS, events);
  }
  explicit DeltaBatchBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DeltaBatch> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DeltaBatch>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DeltaBatch> CreateDeltaBatch(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> symbol = 0,
    uint64_t seq_start = 0,
    uint64_t seq_end = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<md::FBBookDeltaEvent>>> events = 0) {
  DeltaBatchBuilder builder_(_fbb);
  builder_.add_seq_end(seq_end);
  builder_.add_seq_start(seq_start);
  builder_.add_events(events);
  builder_.add_symbol(symbol);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DeltaBatch> CreateDeltaBatchDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *symbol = nullptr,
    uint64_t seq_start = 0,
    uint64_t seq_end = 0,
    const std::vector<::flatbuffers::Offset<md::FBBookDeltaEvent>> *events = nullptr) {
  auto symbol__ = symbol ? _fbb.CreateString(symbol) : 0;
  auto events__ = events ? _fbb.CreateVector<::flatbuffers::Offset<md::FBBookDeltaEvent>>(*events) : 0;
  return md::CreateDeltaBatch(
      _fbb,
      symbol__,
      seq_start,
      seq_end,
      events__);
}

struct OrderBookSnapshot FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OrderBookSnapshotBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SYMBOL = 4,
    VT_SEQ = 6,
    VT_BUY_SIDE = 8,
    VT_SELL_SIDE = 10,
    VT_RECENT_TRADE_PRICE = 12,
    VT_RECENT_TRADE_QTY = 14
  };
  const ::flatbuffers::String *symbol() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYMBOL);
  }
  uint64_t seq() const {
    return GetField<uint64_t>(VT_SEQ, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<md::OrderMsgLevel>> *buy_side() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<md::OrderMsgLevel>> *>(VT_BUY_SIDE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<md::OrderMsgLevel>> *sell_side() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<md::OrderMsgLevel>> *>(VT_SELL_SIDE);
  }
  uint64_t recent_trade_price() const {
    return GetField<uint64_t>(VT_RECENT_TRADE_PRICE, 0);
  }
  uint32_t recent_trade_qty() const {
    return GetField<uint32_t>(VT_RECENT_TRADE_QTY, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SYMBOL) &&
           verifier.VerifyString(symbol()) &&
           VerifyField<uint64_t>(verifier, VT_SEQ, 8) &&
           VerifyOffset(verifier, VT_BUY_SIDE) &&
           verifier.VerifyVector(buy_side()) &&
           verifier.VerifyVectorOfTables(buy_side()) &&
           VerifyOffset(verifier, VT_SELL_SIDE) &&
           verifier.VerifyVector(sell_side()) &&
           verifier.VerifyVectorOfTables(sell_side()) &&
           VerifyField<uint64_t>(verifier, VT_RECENT_TRADE_PRICE, 8) &&
           VerifyField<uint32_t>(verifier, VT_RECENT_TRADE_QTY, 4) &&
           verifier.EndTable();
  }
};

struct OrderBookSnapshotBuilder {
  typedef OrderBookSnapshot Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_symbol(::flatbuffers::Offset<::flatbuffers::String> symbol) {
    fbb_.AddOffset(OrderBookSnapshot::VT_SYMBOL, symbol);
  }
  void add_seq(uint64_t seq) {
    fbb_.AddElement<uint64_t>(OrderBookSnapshot::VT_SEQ, seq, 0);
  }
  void add_buy_side(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<md::OrderMsgLevel>>> buy_side) {
    fbb_.AddOffset(OrderBookSnapshot::VT_BUY_SIDE, buy_side);
  }
  void add_sell_side(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<md::OrderMsgLevel>>> sell_side) {
    fbb_.AddOffset(OrderBookSnapshot::VT_SELL_SIDE, sell_side);
  }
  void add_recent_trade_price(uint64_t recent_trade_price) {
    fbb_.AddElement<uint64_t>(OrderBookSnapshot::VT_RECENT_TRADE_PRICE, recent_trade_price, 0);
  }
  void add_recent_trade_qty(uint32_t recent_trade_qty) {
    fbb_.AddElement<uint32_t>(OrderBookSnapshot::VT_RECENT_TRADE_QTY, recent_trade_qty, 0);
  }
  explicit OrderBookSnapshotBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OrderBookSnapshot> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OrderBookSnapshot>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OrderBookSnapshot> CreateOrderBookSnapshot(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> symbol = 0,
    uint64_t seq = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<md::OrderMsgLevel>>> buy_side = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<md::OrderMsgLevel>>> sell_side = 0,
    uint64_t recent_trade_price = 0,
    uint32_t recent_trade_qty = 0) {
  OrderBookSnapshotBuilder builder_(_fbb);
  builder_.add_recent_trade_price(recent_trade_price);
  builder_.add_seq(seq);
  builder_.add_recent_trade_qty(recent_trade_qty);
  builder_.add_sell_side(sell_side);
  builder_.add_buy_side(buy_side);
  builder_.add_symbol(symbol);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OrderBookSnapshot> CreateOrderBookSnapshotDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *symbol = nullptr,
    uint64_t seq = 0,
    const std::vector<::flatbuffers::Offset<md::OrderMsgLevel>> *buy_side = nullptr,
    const std::vector<::flatbuffers::Offset<md::OrderMsgLevel>> *sell_side = nullptr,
    uint64_t recent_trade_price = 0,
    uint32_t recent_trade_qty = 0) {
  auto symbol__ = symbol ? _fbb.CreateString(symbol) : 0;
  auto buy_side__ = buy_side ? _fbb.CreateVector<::flatbuffers::Offset<md::OrderMsgLevel>>(*buy_side) : 0;
  auto sell_side__ = sell_side ? _fbb.CreateVector<::flatbuffers::Offset<md::OrderMsgLevel>>(*sell_side) : 0;
  return md::CreateOrderBookSnapshot(
      _fbb,
      symbol__,
      seq,
      buy_side__,
      sell_side__,
      recent_trade_price,
      recent_trade_qty);
}

struct Envelope FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EnvelopeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MSG_TYPE = 4,
    VT_MSG = 6
  };
  md::BookMsg msg_type() const {
    return static_cast<md::BookMsg>(GetField<uint8_t>(VT_MSG_TYPE, 0));
  }
  const void *msg() const {
    return GetPointer<const void *>(VT_MSG);
  }
  template<typename T> const T *msg_as() const;
  const md::DeltaBatch *msg_as_DeltaBatch() const {
    return msg_type() == md::BookMsg_DeltaBatch ? static_cast<const md::DeltaBatch *>(msg()) : nullptr;
  }
  const md::OrderBookSnapshot *msg_as_OrderBookSnapshot() const {
    return msg_type() == md::BookMsg_OrderBookSnapshot ? static_cast<const md::OrderBookSnapshot *>(msg()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MSG_TYPE, 1) &&
           VerifyOffset(verifier, VT_MSG) &&
           VerifyBookMsg(verifier, msg(), msg_type()) &&
           verifier.EndTable();
  }
};

template<> inline const md::DeltaBatch *Envelope::msg_as<md::DeltaBatch>() const {
  return msg_as_DeltaBatch();
}

template<> inline const md::OrderBookSnapshot *Envelope::msg_as<md::OrderBookSnapshot>() const {
  return msg_as_OrderBookSnapshot();
}

struct EnvelopeBuilder {
  typedef Envelope Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_msg_type(md::BookMsg msg_type) {
    fbb_.AddElement<uint8_t>(Envelope::VT_MSG_TYPE, static_cast<uint8_t>(msg_type), 0);
  }
  void add_msg(::flatbuffers::Offset<void> msg) {
    fbb_.AddOffset(Envelope::VT_MSG, msg);
  }
  explicit EnvelopeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Envelope> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Envelope>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Envelope> CreateEnvelope(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    md::BookMsg msg_type = md::BookMsg_NONE,
    ::flatbuffers::Offset<void> msg = 0) {
  EnvelopeBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_msg_type(msg_type);
  return builder_.Finish();
}

inline bool VerifyBookMsg(::flatbuffers::Verifier &verifier, const void *obj, BookMsg type) {
  switch (type) {
    case BookMsg_NONE: {
      return true;
    }
    case BookMsg_DeltaBatch: {
      auto ptr = reinterpret_cast<const md::DeltaBatch *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case BookMsg_OrderBookSnapshot: {
      auto ptr = reinterpret_cast<const md::OrderBookSnapshot *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyBookMsgVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyBookMsg(
        verifier,  values->Get(i), types->GetEnum<BookMsg>(i))) {
      return false;
    }
  }
  return true;
}

inline const md::Envelope *GetEnvelope(const void *buf) {
  return ::flatbuffers::GetRoot<md::Envelope>(buf);
}

inline const md::Envelope *GetSizePrefixedEnvelope(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<md::Envelope>(buf);
}

inline bool VerifyEnvelopeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<md::Envelope>(nullptr);
}

inline bool VerifySizePrefixedEnvelopeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<md::Envelope>(nullptr);
}

inline void FinishEnvelopeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<md::Envelope> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEnvelopeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<md::Envelope> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace md

#endif  // FLATBUFFERS_GENERATED_ORDERBOOK_MD_H_
